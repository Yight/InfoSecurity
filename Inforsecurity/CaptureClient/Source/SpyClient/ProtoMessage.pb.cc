// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SpyClient {

namespace {

const ::google::protobuf::Descriptor* IpPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IpPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* HttpPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmailPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmailPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhiteProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhiteProcess_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrojanPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrojanPacket_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PhoneType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoMessage_2eproto() {
  protobuf_AddDesc_ProtoMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoMessage.proto");
  GOOGLE_CHECK(file != NULL);
  IpPacket_descriptor_ = file->message_type(0);
  static const int IpPacket_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpPacket, protocoltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpPacket, sip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpPacket, dip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpPacket, sport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpPacket, dport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpPacket, flow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpPacket, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpPacket, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpPacket, processname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpPacket, processmd5_),
  };
  IpPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IpPacket_descriptor_,
      IpPacket::default_instance_,
      IpPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IpPacket));
  HttpPacket_descriptor_ = file->message_type(1);
  static const int HttpPacket_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPacket, sip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPacket, dip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPacket, sport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPacket, dport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPacket, httpurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPacket, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPacket, processname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPacket, processmd5_),
  };
  HttpPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HttpPacket_descriptor_,
      HttpPacket::default_instance_,
      HttpPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HttpPacket));
  EmailPacket_descriptor_ = file->message_type(2);
  static const int EmailPacket_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailPacket, sip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailPacket, dip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailPacket, sport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailPacket, dport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailPacket, sendto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailPacket, sendcc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailPacket, sendbcc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailPacket, sendfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailPacket, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailPacket, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailPacket, emailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailPacket, processname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailPacket, processmd5_),
  };
  EmailPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmailPacket_descriptor_,
      EmailPacket::default_instance_,
      EmailPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmailPacket));
  WhiteProcess_descriptor_ = file->message_type(3);
  static const int WhiteProcess_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteProcess, processname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteProcess, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteProcess, processmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteProcess, addtime_),
  };
  WhiteProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhiteProcess_descriptor_,
      WhiteProcess::default_instance_,
      WhiteProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhiteProcess));
  TrojanPacket_descriptor_ = file->message_type(4);
  static const int TrojanPacket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrojanPacket, id_),
  };
  TrojanPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrojanPacket_descriptor_,
      TrojanPacket::default_instance_,
      TrojanPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrojanPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrojanPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrojanPacket));
  PhoneType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IpPacket_descriptor_, &IpPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HttpPacket_descriptor_, &HttpPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmailPacket_descriptor_, &EmailPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhiteProcess_descriptor_, &WhiteProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrojanPacket_descriptor_, &TrojanPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoMessage_2eproto() {
  delete IpPacket::default_instance_;
  delete IpPacket_reflection_;
  delete HttpPacket::default_instance_;
  delete HttpPacket_reflection_;
  delete EmailPacket::default_instance_;
  delete EmailPacket_reflection_;
  delete WhiteProcess::default_instance_;
  delete WhiteProcess_reflection_;
  delete TrojanPacket::default_instance_;
  delete TrojanPacket_reflection_;
}

void protobuf_AddDesc_ProtoMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ProtoMessage.proto\022\tSpyClient\"\307\001\n\010IpPa"
    "cket\022*\n\014protocoltype\030\001 \002(\0162\024.SpyClient.P"
    "honeType\022\013\n\003sip\030\002 \002(\t\022\013\n\003dip\030\003 \002(\t\022\r\n\005sp"
    "ort\030\004 \002(\005\022\r\n\005dport\030\005 \002(\005\022\014\n\004flow\030\006 \002(\005\022\020"
    "\n\010datetime\030\007 \002(\t\022\016\n\006length\030\010 \002(\005\022\023\n\013proc"
    "essname\030\t \001(\t\022\022\n\nprocessmd5\030\n \001(\t\"\220\001\n\nHt"
    "tpPacket\022\013\n\003sip\030\001 \002(\t\022\013\n\003dip\030\002 \002(\t\022\r\n\005sp"
    "ort\030\003 \002(\005\022\r\n\005dport\030\004 \002(\005\022\017\n\007httpurl\030\005 \002("
    "\t\022\020\n\010datetime\030\006 \002(\t\022\023\n\013processname\030\007 \001(\t"
    "\022\022\n\nprocessmd5\030\010 \001(\t\"\347\001\n\013EmailPacket\022\013\n\003"
    "sip\030\001 \002(\t\022\013\n\003dip\030\002 \002(\t\022\r\n\005sport\030\003 \002(\005\022\r\n"
    "\005dport\030\004 \002(\005\022\016\n\006sendto\030\005 \002(\t\022\016\n\006sendcc\030\006"
    " \001(\t\022\017\n\007sendbcc\030\007 \001(\t\022\020\n\010sendfrom\030\010 \002(\t\022"
    "\017\n\007subject\030\t \001(\t\022\020\n\010datetime\030\n \002(\t\022\021\n\tem"
    "ailtype\030\013 \002(\005\022\023\n\013processname\030\014 \001(\t\022\022\n\npr"
    "ocessmd5\030\r \001(\t\"Y\n\014WhiteProcess\022\023\n\013proces"
    "sname\030\001 \002(\t\022\017\n\007version\030\002 \002(\t\022\022\n\nprocessm"
    "d5\030\003 \002(\t\022\017\n\007addtime\030\004 \002(\t\"\032\n\014TrojanPacke"
    "t\022\n\n\002id\030\002 \002(\005*/\n\tPhoneType\022\020\n\014TCP_PROTOC"
    "OL\020\000\022\020\n\014UDP_PROTOCOL\020\001", 782);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoMessage.proto", &protobuf_RegisterTypes);
  IpPacket::default_instance_ = new IpPacket();
  HttpPacket::default_instance_ = new HttpPacket();
  EmailPacket::default_instance_ = new EmailPacket();
  WhiteProcess::default_instance_ = new WhiteProcess();
  TrojanPacket::default_instance_ = new TrojanPacket();
  IpPacket::default_instance_->InitAsDefaultInstance();
  HttpPacket::default_instance_->InitAsDefaultInstance();
  EmailPacket::default_instance_->InitAsDefaultInstance();
  WhiteProcess::default_instance_->InitAsDefaultInstance();
  TrojanPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoMessage_2eproto {
  StaticDescriptorInitializer_ProtoMessage_2eproto() {
    protobuf_AddDesc_ProtoMessage_2eproto();
  }
} static_descriptor_initializer_ProtoMessage_2eproto_;

const ::google::protobuf::EnumDescriptor* PhoneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhoneType_descriptor_;
}
bool PhoneType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int IpPacket::kProtocoltypeFieldNumber;
const int IpPacket::kSipFieldNumber;
const int IpPacket::kDipFieldNumber;
const int IpPacket::kSportFieldNumber;
const int IpPacket::kDportFieldNumber;
const int IpPacket::kFlowFieldNumber;
const int IpPacket::kDatetimeFieldNumber;
const int IpPacket::kLengthFieldNumber;
const int IpPacket::kProcessnameFieldNumber;
const int IpPacket::kProcessmd5FieldNumber;
#endif  // !_MSC_VER

IpPacket::IpPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IpPacket::InitAsDefaultInstance() {
}

IpPacket::IpPacket(const IpPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IpPacket::SharedCtor() {
  _cached_size_ = 0;
  protocoltype_ = 0;
  sip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sport_ = 0;
  dport_ = 0;
  flow_ = 0;
  datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  length_ = 0;
  processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  processmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IpPacket::~IpPacket() {
  SharedDtor();
}

void IpPacket::SharedDtor() {
  if (sip_ != &::google::protobuf::internal::kEmptyString) {
    delete sip_;
  }
  if (dip_ != &::google::protobuf::internal::kEmptyString) {
    delete dip_;
  }
  if (datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete datetime_;
  }
  if (processname_ != &::google::protobuf::internal::kEmptyString) {
    delete processname_;
  }
  if (processmd5_ != &::google::protobuf::internal::kEmptyString) {
    delete processmd5_;
  }
  if (this != default_instance_) {
  }
}

void IpPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IpPacket_descriptor_;
}

const IpPacket& IpPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMessage_2eproto();  return *default_instance_;
}

IpPacket* IpPacket::default_instance_ = NULL;

IpPacket* IpPacket::New() const {
  return new IpPacket;
}

void IpPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protocoltype_ = 0;
    if (has_sip()) {
      if (sip_ != &::google::protobuf::internal::kEmptyString) {
        sip_->clear();
      }
    }
    if (has_dip()) {
      if (dip_ != &::google::protobuf::internal::kEmptyString) {
        dip_->clear();
      }
    }
    sport_ = 0;
    dport_ = 0;
    flow_ = 0;
    if (has_datetime()) {
      if (datetime_ != &::google::protobuf::internal::kEmptyString) {
        datetime_->clear();
      }
    }
    length_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_processname()) {
      if (processname_ != &::google::protobuf::internal::kEmptyString) {
        processname_->clear();
      }
    }
    if (has_processmd5()) {
      if (processmd5_ != &::google::protobuf::internal::kEmptyString) {
        processmd5_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IpPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SpyClient.PhoneType protocoltype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (SpyClient::PhoneType_IsValid(value)) {
            set_protocoltype(static_cast< SpyClient::PhoneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sip;
        break;
      }
      
      // required string sip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sip().data(), this->sip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dip;
        break;
      }
      
      // required string dip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dip().data(), this->dip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sport;
        break;
      }
      
      // required int32 sport = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sport_)));
          set_has_sport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dport;
        break;
      }
      
      // required int32 dport = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dport_)));
          set_has_dport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_flow;
        break;
      }
      
      // required int32 flow = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flow_)));
          set_has_flow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_datetime;
        break;
      }
      
      // required string datetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datetime().data(), this->datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_length;
        break;
      }
      
      // required int32 length = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_processname;
        break;
      }
      
      // optional string processname = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->processname().data(), this->processname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_processmd5;
        break;
      }
      
      // optional string processmd5 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processmd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->processmd5().data(), this->processmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IpPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SpyClient.PhoneType protocoltype = 1;
  if (has_protocoltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protocoltype(), output);
  }
  
  // required string sip = 2;
  if (has_sip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sip().data(), this->sip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sip(), output);
  }
  
  // required string dip = 3;
  if (has_dip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dip().data(), this->dip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dip(), output);
  }
  
  // required int32 sport = 4;
  if (has_sport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sport(), output);
  }
  
  // required int32 dport = 5;
  if (has_dport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dport(), output);
  }
  
  // required int32 flow = 6;
  if (has_flow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->flow(), output);
  }
  
  // required string datetime = 7;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datetime().data(), this->datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->datetime(), output);
  }
  
  // required int32 length = 8;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->length(), output);
  }
  
  // optional string processname = 9;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->processname(), output);
  }
  
  // optional string processmd5 = 10;
  if (has_processmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processmd5().data(), this->processmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->processmd5(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IpPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SpyClient.PhoneType protocoltype = 1;
  if (has_protocoltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protocoltype(), target);
  }
  
  // required string sip = 2;
  if (has_sip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sip().data(), this->sip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sip(), target);
  }
  
  // required string dip = 3;
  if (has_dip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dip().data(), this->dip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dip(), target);
  }
  
  // required int32 sport = 4;
  if (has_sport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sport(), target);
  }
  
  // required int32 dport = 5;
  if (has_dport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dport(), target);
  }
  
  // required int32 flow = 6;
  if (has_flow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->flow(), target);
  }
  
  // required string datetime = 7;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datetime().data(), this->datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->datetime(), target);
  }
  
  // required int32 length = 8;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->length(), target);
  }
  
  // optional string processname = 9;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->processname(), target);
  }
  
  // optional string processmd5 = 10;
  if (has_processmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processmd5().data(), this->processmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->processmd5(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IpPacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SpyClient.PhoneType protocoltype = 1;
    if (has_protocoltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocoltype());
    }
    
    // required string sip = 2;
    if (has_sip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sip());
    }
    
    // required string dip = 3;
    if (has_dip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dip());
    }
    
    // required int32 sport = 4;
    if (has_sport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sport());
    }
    
    // required int32 dport = 5;
    if (has_dport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dport());
    }
    
    // required int32 flow = 6;
    if (has_flow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flow());
    }
    
    // required string datetime = 7;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datetime());
    }
    
    // required int32 length = 8;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string processname = 9;
    if (has_processname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processname());
    }
    
    // optional string processmd5 = 10;
    if (has_processmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processmd5());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IpPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IpPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IpPacket::MergeFrom(const IpPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocoltype()) {
      set_protocoltype(from.protocoltype());
    }
    if (from.has_sip()) {
      set_sip(from.sip());
    }
    if (from.has_dip()) {
      set_dip(from.dip());
    }
    if (from.has_sport()) {
      set_sport(from.sport());
    }
    if (from.has_dport()) {
      set_dport(from.dport());
    }
    if (from.has_flow()) {
      set_flow(from.flow());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_processname()) {
      set_processname(from.processname());
    }
    if (from.has_processmd5()) {
      set_processmd5(from.processmd5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IpPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpPacket::CopyFrom(const IpPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void IpPacket::Swap(IpPacket* other) {
  if (other != this) {
    std::swap(protocoltype_, other->protocoltype_);
    std::swap(sip_, other->sip_);
    std::swap(dip_, other->dip_);
    std::swap(sport_, other->sport_);
    std::swap(dport_, other->dport_);
    std::swap(flow_, other->flow_);
    std::swap(datetime_, other->datetime_);
    std::swap(length_, other->length_);
    std::swap(processname_, other->processname_);
    std::swap(processmd5_, other->processmd5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IpPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IpPacket_descriptor_;
  metadata.reflection = IpPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HttpPacket::kSipFieldNumber;
const int HttpPacket::kDipFieldNumber;
const int HttpPacket::kSportFieldNumber;
const int HttpPacket::kDportFieldNumber;
const int HttpPacket::kHttpurlFieldNumber;
const int HttpPacket::kDatetimeFieldNumber;
const int HttpPacket::kProcessnameFieldNumber;
const int HttpPacket::kProcessmd5FieldNumber;
#endif  // !_MSC_VER

HttpPacket::HttpPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HttpPacket::InitAsDefaultInstance() {
}

HttpPacket::HttpPacket(const HttpPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HttpPacket::SharedCtor() {
  _cached_size_ = 0;
  sip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sport_ = 0;
  dport_ = 0;
  httpurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  processmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpPacket::~HttpPacket() {
  SharedDtor();
}

void HttpPacket::SharedDtor() {
  if (sip_ != &::google::protobuf::internal::kEmptyString) {
    delete sip_;
  }
  if (dip_ != &::google::protobuf::internal::kEmptyString) {
    delete dip_;
  }
  if (httpurl_ != &::google::protobuf::internal::kEmptyString) {
    delete httpurl_;
  }
  if (datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete datetime_;
  }
  if (processname_ != &::google::protobuf::internal::kEmptyString) {
    delete processname_;
  }
  if (processmd5_ != &::google::protobuf::internal::kEmptyString) {
    delete processmd5_;
  }
  if (this != default_instance_) {
  }
}

void HttpPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpPacket_descriptor_;
}

const HttpPacket& HttpPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMessage_2eproto();  return *default_instance_;
}

HttpPacket* HttpPacket::default_instance_ = NULL;

HttpPacket* HttpPacket::New() const {
  return new HttpPacket;
}

void HttpPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sip()) {
      if (sip_ != &::google::protobuf::internal::kEmptyString) {
        sip_->clear();
      }
    }
    if (has_dip()) {
      if (dip_ != &::google::protobuf::internal::kEmptyString) {
        dip_->clear();
      }
    }
    sport_ = 0;
    dport_ = 0;
    if (has_httpurl()) {
      if (httpurl_ != &::google::protobuf::internal::kEmptyString) {
        httpurl_->clear();
      }
    }
    if (has_datetime()) {
      if (datetime_ != &::google::protobuf::internal::kEmptyString) {
        datetime_->clear();
      }
    }
    if (has_processname()) {
      if (processname_ != &::google::protobuf::internal::kEmptyString) {
        processname_->clear();
      }
    }
    if (has_processmd5()) {
      if (processmd5_ != &::google::protobuf::internal::kEmptyString) {
        processmd5_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HttpPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sip().data(), this->sip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dip;
        break;
      }
      
      // required string dip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dip().data(), this->dip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sport;
        break;
      }
      
      // required int32 sport = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sport_)));
          set_has_sport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dport;
        break;
      }
      
      // required int32 dport = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dport_)));
          set_has_dport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_httpurl;
        break;
      }
      
      // required string httpurl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_httpurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_httpurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->httpurl().data(), this->httpurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_datetime;
        break;
      }
      
      // required string datetime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datetime().data(), this->datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_processname;
        break;
      }
      
      // optional string processname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->processname().data(), this->processname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_processmd5;
        break;
      }
      
      // optional string processmd5 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processmd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->processmd5().data(), this->processmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HttpPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sip = 1;
  if (has_sip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sip().data(), this->sip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sip(), output);
  }
  
  // required string dip = 2;
  if (has_dip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dip().data(), this->dip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dip(), output);
  }
  
  // required int32 sport = 3;
  if (has_sport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sport(), output);
  }
  
  // required int32 dport = 4;
  if (has_dport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dport(), output);
  }
  
  // required string httpurl = 5;
  if (has_httpurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->httpurl().data(), this->httpurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->httpurl(), output);
  }
  
  // required string datetime = 6;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datetime().data(), this->datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->datetime(), output);
  }
  
  // optional string processname = 7;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->processname(), output);
  }
  
  // optional string processmd5 = 8;
  if (has_processmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processmd5().data(), this->processmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->processmd5(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HttpPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sip = 1;
  if (has_sip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sip().data(), this->sip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sip(), target);
  }
  
  // required string dip = 2;
  if (has_dip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dip().data(), this->dip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dip(), target);
  }
  
  // required int32 sport = 3;
  if (has_sport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sport(), target);
  }
  
  // required int32 dport = 4;
  if (has_dport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dport(), target);
  }
  
  // required string httpurl = 5;
  if (has_httpurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->httpurl().data(), this->httpurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->httpurl(), target);
  }
  
  // required string datetime = 6;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datetime().data(), this->datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->datetime(), target);
  }
  
  // optional string processname = 7;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->processname(), target);
  }
  
  // optional string processmd5 = 8;
  if (has_processmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processmd5().data(), this->processmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->processmd5(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HttpPacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sip = 1;
    if (has_sip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sip());
    }
    
    // required string dip = 2;
    if (has_dip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dip());
    }
    
    // required int32 sport = 3;
    if (has_sport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sport());
    }
    
    // required int32 dport = 4;
    if (has_dport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dport());
    }
    
    // required string httpurl = 5;
    if (has_httpurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->httpurl());
    }
    
    // required string datetime = 6;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datetime());
    }
    
    // optional string processname = 7;
    if (has_processname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processname());
    }
    
    // optional string processmd5 = 8;
    if (has_processmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processmd5());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HttpPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HttpPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HttpPacket::MergeFrom(const HttpPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sip()) {
      set_sip(from.sip());
    }
    if (from.has_dip()) {
      set_dip(from.dip());
    }
    if (from.has_sport()) {
      set_sport(from.sport());
    }
    if (from.has_dport()) {
      set_dport(from.dport());
    }
    if (from.has_httpurl()) {
      set_httpurl(from.httpurl());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_processname()) {
      set_processname(from.processname());
    }
    if (from.has_processmd5()) {
      set_processmd5(from.processmd5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HttpPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpPacket::CopyFrom(const HttpPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void HttpPacket::Swap(HttpPacket* other) {
  if (other != this) {
    std::swap(sip_, other->sip_);
    std::swap(dip_, other->dip_);
    std::swap(sport_, other->sport_);
    std::swap(dport_, other->dport_);
    std::swap(httpurl_, other->httpurl_);
    std::swap(datetime_, other->datetime_);
    std::swap(processname_, other->processname_);
    std::swap(processmd5_, other->processmd5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HttpPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpPacket_descriptor_;
  metadata.reflection = HttpPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmailPacket::kSipFieldNumber;
const int EmailPacket::kDipFieldNumber;
const int EmailPacket::kSportFieldNumber;
const int EmailPacket::kDportFieldNumber;
const int EmailPacket::kSendtoFieldNumber;
const int EmailPacket::kSendccFieldNumber;
const int EmailPacket::kSendbccFieldNumber;
const int EmailPacket::kSendfromFieldNumber;
const int EmailPacket::kSubjectFieldNumber;
const int EmailPacket::kDatetimeFieldNumber;
const int EmailPacket::kEmailtypeFieldNumber;
const int EmailPacket::kProcessnameFieldNumber;
const int EmailPacket::kProcessmd5FieldNumber;
#endif  // !_MSC_VER

EmailPacket::EmailPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmailPacket::InitAsDefaultInstance() {
}

EmailPacket::EmailPacket(const EmailPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmailPacket::SharedCtor() {
  _cached_size_ = 0;
  sip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sport_ = 0;
  dport_ = 0;
  sendto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendcc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendbcc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendfrom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  emailtype_ = 0;
  processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  processmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmailPacket::~EmailPacket() {
  SharedDtor();
}

void EmailPacket::SharedDtor() {
  if (sip_ != &::google::protobuf::internal::kEmptyString) {
    delete sip_;
  }
  if (dip_ != &::google::protobuf::internal::kEmptyString) {
    delete dip_;
  }
  if (sendto_ != &::google::protobuf::internal::kEmptyString) {
    delete sendto_;
  }
  if (sendcc_ != &::google::protobuf::internal::kEmptyString) {
    delete sendcc_;
  }
  if (sendbcc_ != &::google::protobuf::internal::kEmptyString) {
    delete sendbcc_;
  }
  if (sendfrom_ != &::google::protobuf::internal::kEmptyString) {
    delete sendfrom_;
  }
  if (subject_ != &::google::protobuf::internal::kEmptyString) {
    delete subject_;
  }
  if (datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete datetime_;
  }
  if (processname_ != &::google::protobuf::internal::kEmptyString) {
    delete processname_;
  }
  if (processmd5_ != &::google::protobuf::internal::kEmptyString) {
    delete processmd5_;
  }
  if (this != default_instance_) {
  }
}

void EmailPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmailPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmailPacket_descriptor_;
}

const EmailPacket& EmailPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMessage_2eproto();  return *default_instance_;
}

EmailPacket* EmailPacket::default_instance_ = NULL;

EmailPacket* EmailPacket::New() const {
  return new EmailPacket;
}

void EmailPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sip()) {
      if (sip_ != &::google::protobuf::internal::kEmptyString) {
        sip_->clear();
      }
    }
    if (has_dip()) {
      if (dip_ != &::google::protobuf::internal::kEmptyString) {
        dip_->clear();
      }
    }
    sport_ = 0;
    dport_ = 0;
    if (has_sendto()) {
      if (sendto_ != &::google::protobuf::internal::kEmptyString) {
        sendto_->clear();
      }
    }
    if (has_sendcc()) {
      if (sendcc_ != &::google::protobuf::internal::kEmptyString) {
        sendcc_->clear();
      }
    }
    if (has_sendbcc()) {
      if (sendbcc_ != &::google::protobuf::internal::kEmptyString) {
        sendbcc_->clear();
      }
    }
    if (has_sendfrom()) {
      if (sendfrom_ != &::google::protobuf::internal::kEmptyString) {
        sendfrom_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::kEmptyString) {
        subject_->clear();
      }
    }
    if (has_datetime()) {
      if (datetime_ != &::google::protobuf::internal::kEmptyString) {
        datetime_->clear();
      }
    }
    emailtype_ = 0;
    if (has_processname()) {
      if (processname_ != &::google::protobuf::internal::kEmptyString) {
        processname_->clear();
      }
    }
    if (has_processmd5()) {
      if (processmd5_ != &::google::protobuf::internal::kEmptyString) {
        processmd5_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmailPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sip().data(), this->sip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dip;
        break;
      }
      
      // required string dip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dip().data(), this->dip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sport;
        break;
      }
      
      // required int32 sport = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sport_)));
          set_has_sport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dport;
        break;
      }
      
      // required int32 dport = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dport_)));
          set_has_dport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sendto;
        break;
      }
      
      // required string sendto = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendto().data(), this->sendto().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sendcc;
        break;
      }
      
      // optional string sendcc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendcc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendcc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendcc().data(), this->sendcc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sendbcc;
        break;
      }
      
      // optional string sendbcc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendbcc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendbcc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendbcc().data(), this->sendbcc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sendfrom;
        break;
      }
      
      // required string sendfrom = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendfrom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendfrom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendfrom().data(), this->sendfrom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_subject;
        break;
      }
      
      // optional string subject = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_datetime;
        break;
      }
      
      // required string datetime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datetime().data(), this->datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_emailtype;
        break;
      }
      
      // required int32 emailtype = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emailtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emailtype_)));
          set_has_emailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_processname;
        break;
      }
      
      // optional string processname = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->processname().data(), this->processname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_processmd5;
        break;
      }
      
      // optional string processmd5 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processmd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->processmd5().data(), this->processmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EmailPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sip = 1;
  if (has_sip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sip().data(), this->sip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sip(), output);
  }
  
  // required string dip = 2;
  if (has_dip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dip().data(), this->dip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dip(), output);
  }
  
  // required int32 sport = 3;
  if (has_sport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sport(), output);
  }
  
  // required int32 dport = 4;
  if (has_dport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dport(), output);
  }
  
  // required string sendto = 5;
  if (has_sendto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendto().data(), this->sendto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sendto(), output);
  }
  
  // optional string sendcc = 6;
  if (has_sendcc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendcc().data(), this->sendcc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sendcc(), output);
  }
  
  // optional string sendbcc = 7;
  if (has_sendbcc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendbcc().data(), this->sendbcc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sendbcc(), output);
  }
  
  // required string sendfrom = 8;
  if (has_sendfrom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendfrom().data(), this->sendfrom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sendfrom(), output);
  }
  
  // optional string subject = 9;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->subject(), output);
  }
  
  // required string datetime = 10;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datetime().data(), this->datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->datetime(), output);
  }
  
  // required int32 emailtype = 11;
  if (has_emailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->emailtype(), output);
  }
  
  // optional string processname = 12;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->processname(), output);
  }
  
  // optional string processmd5 = 13;
  if (has_processmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processmd5().data(), this->processmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->processmd5(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmailPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sip = 1;
  if (has_sip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sip().data(), this->sip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sip(), target);
  }
  
  // required string dip = 2;
  if (has_dip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dip().data(), this->dip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dip(), target);
  }
  
  // required int32 sport = 3;
  if (has_sport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sport(), target);
  }
  
  // required int32 dport = 4;
  if (has_dport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dport(), target);
  }
  
  // required string sendto = 5;
  if (has_sendto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendto().data(), this->sendto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sendto(), target);
  }
  
  // optional string sendcc = 6;
  if (has_sendcc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendcc().data(), this->sendcc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sendcc(), target);
  }
  
  // optional string sendbcc = 7;
  if (has_sendbcc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendbcc().data(), this->sendbcc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sendbcc(), target);
  }
  
  // required string sendfrom = 8;
  if (has_sendfrom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendfrom().data(), this->sendfrom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sendfrom(), target);
  }
  
  // optional string subject = 9;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->subject(), target);
  }
  
  // required string datetime = 10;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datetime().data(), this->datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->datetime(), target);
  }
  
  // required int32 emailtype = 11;
  if (has_emailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->emailtype(), target);
  }
  
  // optional string processname = 12;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->processname(), target);
  }
  
  // optional string processmd5 = 13;
  if (has_processmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processmd5().data(), this->processmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->processmd5(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmailPacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sip = 1;
    if (has_sip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sip());
    }
    
    // required string dip = 2;
    if (has_dip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dip());
    }
    
    // required int32 sport = 3;
    if (has_sport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sport());
    }
    
    // required int32 dport = 4;
    if (has_dport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dport());
    }
    
    // required string sendto = 5;
    if (has_sendto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendto());
    }
    
    // optional string sendcc = 6;
    if (has_sendcc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendcc());
    }
    
    // optional string sendbcc = 7;
    if (has_sendbcc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendbcc());
    }
    
    // required string sendfrom = 8;
    if (has_sendfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendfrom());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string subject = 9;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }
    
    // required string datetime = 10;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datetime());
    }
    
    // required int32 emailtype = 11;
    if (has_emailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emailtype());
    }
    
    // optional string processname = 12;
    if (has_processname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processname());
    }
    
    // optional string processmd5 = 13;
    if (has_processmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processmd5());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmailPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmailPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmailPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmailPacket::MergeFrom(const EmailPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sip()) {
      set_sip(from.sip());
    }
    if (from.has_dip()) {
      set_dip(from.dip());
    }
    if (from.has_sport()) {
      set_sport(from.sport());
    }
    if (from.has_dport()) {
      set_dport(from.dport());
    }
    if (from.has_sendto()) {
      set_sendto(from.sendto());
    }
    if (from.has_sendcc()) {
      set_sendcc(from.sendcc());
    }
    if (from.has_sendbcc()) {
      set_sendbcc(from.sendbcc());
    }
    if (from.has_sendfrom()) {
      set_sendfrom(from.sendfrom());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_subject()) {
      set_subject(from.subject());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_emailtype()) {
      set_emailtype(from.emailtype());
    }
    if (from.has_processname()) {
      set_processname(from.processname());
    }
    if (from.has_processmd5()) {
      set_processmd5(from.processmd5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmailPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailPacket::CopyFrom(const EmailPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000069f) != 0x0000069f) return false;
  
  return true;
}

void EmailPacket::Swap(EmailPacket* other) {
  if (other != this) {
    std::swap(sip_, other->sip_);
    std::swap(dip_, other->dip_);
    std::swap(sport_, other->sport_);
    std::swap(dport_, other->dport_);
    std::swap(sendto_, other->sendto_);
    std::swap(sendcc_, other->sendcc_);
    std::swap(sendbcc_, other->sendbcc_);
    std::swap(sendfrom_, other->sendfrom_);
    std::swap(subject_, other->subject_);
    std::swap(datetime_, other->datetime_);
    std::swap(emailtype_, other->emailtype_);
    std::swap(processname_, other->processname_);
    std::swap(processmd5_, other->processmd5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmailPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmailPacket_descriptor_;
  metadata.reflection = EmailPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WhiteProcess::kProcessnameFieldNumber;
const int WhiteProcess::kVersionFieldNumber;
const int WhiteProcess::kProcessmd5FieldNumber;
const int WhiteProcess::kAddtimeFieldNumber;
#endif  // !_MSC_VER

WhiteProcess::WhiteProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WhiteProcess::InitAsDefaultInstance() {
}

WhiteProcess::WhiteProcess(const WhiteProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WhiteProcess::SharedCtor() {
  _cached_size_ = 0;
  processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  processmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhiteProcess::~WhiteProcess() {
  SharedDtor();
}

void WhiteProcess::SharedDtor() {
  if (processname_ != &::google::protobuf::internal::kEmptyString) {
    delete processname_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (processmd5_ != &::google::protobuf::internal::kEmptyString) {
    delete processmd5_;
  }
  if (addtime_ != &::google::protobuf::internal::kEmptyString) {
    delete addtime_;
  }
  if (this != default_instance_) {
  }
}

void WhiteProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhiteProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhiteProcess_descriptor_;
}

const WhiteProcess& WhiteProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMessage_2eproto();  return *default_instance_;
}

WhiteProcess* WhiteProcess::default_instance_ = NULL;

WhiteProcess* WhiteProcess::New() const {
  return new WhiteProcess;
}

void WhiteProcess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_processname()) {
      if (processname_ != &::google::protobuf::internal::kEmptyString) {
        processname_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_processmd5()) {
      if (processmd5_ != &::google::protobuf::internal::kEmptyString) {
        processmd5_->clear();
      }
    }
    if (has_addtime()) {
      if (addtime_ != &::google::protobuf::internal::kEmptyString) {
        addtime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WhiteProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string processname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->processname().data(), this->processname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }
      
      // required string version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_processmd5;
        break;
      }
      
      // required string processmd5 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processmd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->processmd5().data(), this->processmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_addtime;
        break;
      }
      
      // required string addtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addtime().data(), this->addtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WhiteProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string processname = 1;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->processname(), output);
  }
  
  // required string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->version(), output);
  }
  
  // required string processmd5 = 3;
  if (has_processmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processmd5().data(), this->processmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->processmd5(), output);
  }
  
  // required string addtime = 4;
  if (has_addtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addtime().data(), this->addtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->addtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WhiteProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string processname = 1;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->processname(), target);
  }
  
  // required string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }
  
  // required string processmd5 = 3;
  if (has_processmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processmd5().data(), this->processmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->processmd5(), target);
  }
  
  // required string addtime = 4;
  if (has_addtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addtime().data(), this->addtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->addtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WhiteProcess::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string processname = 1;
    if (has_processname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processname());
    }
    
    // required string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // required string processmd5 = 3;
    if (has_processmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processmd5());
    }
    
    // required string addtime = 4;
    if (has_addtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhiteProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WhiteProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WhiteProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WhiteProcess::MergeFrom(const WhiteProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_processname()) {
      set_processname(from.processname());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_processmd5()) {
      set_processmd5(from.processmd5());
    }
    if (from.has_addtime()) {
      set_addtime(from.addtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WhiteProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhiteProcess::CopyFrom(const WhiteProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhiteProcess::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void WhiteProcess::Swap(WhiteProcess* other) {
  if (other != this) {
    std::swap(processname_, other->processname_);
    std::swap(version_, other->version_);
    std::swap(processmd5_, other->processmd5_);
    std::swap(addtime_, other->addtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WhiteProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhiteProcess_descriptor_;
  metadata.reflection = WhiteProcess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrojanPacket::kIdFieldNumber;
#endif  // !_MSC_VER

TrojanPacket::TrojanPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrojanPacket::InitAsDefaultInstance() {
}

TrojanPacket::TrojanPacket(const TrojanPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrojanPacket::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrojanPacket::~TrojanPacket() {
  SharedDtor();
}

void TrojanPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrojanPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrojanPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrojanPacket_descriptor_;
}

const TrojanPacket& TrojanPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMessage_2eproto();  return *default_instance_;
}

TrojanPacket* TrojanPacket::default_instance_ = NULL;

TrojanPacket* TrojanPacket::New() const {
  return new TrojanPacket;
}

void TrojanPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrojanPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrojanPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrojanPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrojanPacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrojanPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrojanPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrojanPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrojanPacket::MergeFrom(const TrojanPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrojanPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrojanPacket::CopyFrom(const TrojanPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrojanPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TrojanPacket::Swap(TrojanPacket* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrojanPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrojanPacket_descriptor_;
  metadata.reflection = TrojanPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SpyClient

// @@protoc_insertion_point(global_scope)
