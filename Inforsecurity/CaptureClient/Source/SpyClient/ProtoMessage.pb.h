// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoMessage.proto

#ifndef PROTOBUF_ProtoMessage_2eproto__INCLUDED
#define PROTOBUF_ProtoMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace SpyClient {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoMessage_2eproto();
void protobuf_AssignDesc_ProtoMessage_2eproto();
void protobuf_ShutdownFile_ProtoMessage_2eproto();

class IpPacket;
class HttpPacket;
class EmailPacket;
class WhiteProcess;
class TrojanPacket;

enum PhoneType {
  TCP_PROTOCOL = 0,
  UDP_PROTOCOL = 1
};
bool PhoneType_IsValid(int value);
const PhoneType PhoneType_MIN = TCP_PROTOCOL;
const PhoneType PhoneType_MAX = UDP_PROTOCOL;
const int PhoneType_ARRAYSIZE = PhoneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhoneType_descriptor();
inline const ::std::string& PhoneType_Name(PhoneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhoneType_descriptor(), value);
}
inline bool PhoneType_Parse(
    const ::std::string& name, PhoneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhoneType>(
    PhoneType_descriptor(), name, value);
}
// ===================================================================

class IpPacket : public ::google::protobuf::Message {
 public:
  IpPacket();
  virtual ~IpPacket();
  
  IpPacket(const IpPacket& from);
  
  inline IpPacket& operator=(const IpPacket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpPacket& default_instance();
  
  void Swap(IpPacket* other);
  
  // implements Message ----------------------------------------------
  
  IpPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpPacket& from);
  void MergeFrom(const IpPacket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SpyClient.PhoneType protocoltype = 1;
  inline bool has_protocoltype() const;
  inline void clear_protocoltype();
  static const int kProtocoltypeFieldNumber = 1;
  inline SpyClient::PhoneType protocoltype() const;
  inline void set_protocoltype(SpyClient::PhoneType value);
  
  // required string sip = 2;
  inline bool has_sip() const;
  inline void clear_sip();
  static const int kSipFieldNumber = 2;
  inline const ::std::string& sip() const;
  inline void set_sip(const ::std::string& value);
  inline void set_sip(const char* value);
  inline void set_sip(const char* value, size_t size);
  inline ::std::string* mutable_sip();
  inline ::std::string* release_sip();
  
  // required string dip = 3;
  inline bool has_dip() const;
  inline void clear_dip();
  static const int kDipFieldNumber = 3;
  inline const ::std::string& dip() const;
  inline void set_dip(const ::std::string& value);
  inline void set_dip(const char* value);
  inline void set_dip(const char* value, size_t size);
  inline ::std::string* mutable_dip();
  inline ::std::string* release_dip();
  
  // required int32 sport = 4;
  inline bool has_sport() const;
  inline void clear_sport();
  static const int kSportFieldNumber = 4;
  inline ::google::protobuf::int32 sport() const;
  inline void set_sport(::google::protobuf::int32 value);
  
  // required int32 dport = 5;
  inline bool has_dport() const;
  inline void clear_dport();
  static const int kDportFieldNumber = 5;
  inline ::google::protobuf::int32 dport() const;
  inline void set_dport(::google::protobuf::int32 value);
  
  // required int32 flow = 6;
  inline bool has_flow() const;
  inline void clear_flow();
  static const int kFlowFieldNumber = 6;
  inline ::google::protobuf::int32 flow() const;
  inline void set_flow(::google::protobuf::int32 value);
  
  // required string datetime = 7;
  inline bool has_datetime() const;
  inline void clear_datetime();
  static const int kDatetimeFieldNumber = 7;
  inline const ::std::string& datetime() const;
  inline void set_datetime(const ::std::string& value);
  inline void set_datetime(const char* value);
  inline void set_datetime(const char* value, size_t size);
  inline ::std::string* mutable_datetime();
  inline ::std::string* release_datetime();
  
  // required int32 length = 8;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 8;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);
  
  // optional string processname = 9;
  inline bool has_processname() const;
  inline void clear_processname();
  static const int kProcessnameFieldNumber = 9;
  inline const ::std::string& processname() const;
  inline void set_processname(const ::std::string& value);
  inline void set_processname(const char* value);
  inline void set_processname(const char* value, size_t size);
  inline ::std::string* mutable_processname();
  inline ::std::string* release_processname();
  
  // optional string processmd5 = 10;
  inline bool has_processmd5() const;
  inline void clear_processmd5();
  static const int kProcessmd5FieldNumber = 10;
  inline const ::std::string& processmd5() const;
  inline void set_processmd5(const ::std::string& value);
  inline void set_processmd5(const char* value);
  inline void set_processmd5(const char* value, size_t size);
  inline ::std::string* mutable_processmd5();
  inline ::std::string* release_processmd5();
  
  // @@protoc_insertion_point(class_scope:SpyClient.IpPacket)
 private:
  inline void set_has_protocoltype();
  inline void clear_has_protocoltype();
  inline void set_has_sip();
  inline void clear_has_sip();
  inline void set_has_dip();
  inline void clear_has_dip();
  inline void set_has_sport();
  inline void clear_has_sport();
  inline void set_has_dport();
  inline void clear_has_dport();
  inline void set_has_flow();
  inline void clear_has_flow();
  inline void set_has_datetime();
  inline void clear_has_datetime();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_processname();
  inline void clear_has_processname();
  inline void set_has_processmd5();
  inline void clear_has_processmd5();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* sip_;
  int protocoltype_;
  ::google::protobuf::int32 sport_;
  ::std::string* dip_;
  ::google::protobuf::int32 dport_;
  ::google::protobuf::int32 flow_;
  ::std::string* datetime_;
  ::std::string* processname_;
  ::std::string* processmd5_;
  ::google::protobuf::int32 length_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoMessage_2eproto();
  friend void protobuf_AssignDesc_ProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_ProtoMessage_2eproto();
  
  void InitAsDefaultInstance();
  static IpPacket* default_instance_;
};
// -------------------------------------------------------------------

class HttpPacket : public ::google::protobuf::Message {
 public:
  HttpPacket();
  virtual ~HttpPacket();
  
  HttpPacket(const HttpPacket& from);
  
  inline HttpPacket& operator=(const HttpPacket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpPacket& default_instance();
  
  void Swap(HttpPacket* other);
  
  // implements Message ----------------------------------------------
  
  HttpPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpPacket& from);
  void MergeFrom(const HttpPacket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string sip = 1;
  inline bool has_sip() const;
  inline void clear_sip();
  static const int kSipFieldNumber = 1;
  inline const ::std::string& sip() const;
  inline void set_sip(const ::std::string& value);
  inline void set_sip(const char* value);
  inline void set_sip(const char* value, size_t size);
  inline ::std::string* mutable_sip();
  inline ::std::string* release_sip();
  
  // required string dip = 2;
  inline bool has_dip() const;
  inline void clear_dip();
  static const int kDipFieldNumber = 2;
  inline const ::std::string& dip() const;
  inline void set_dip(const ::std::string& value);
  inline void set_dip(const char* value);
  inline void set_dip(const char* value, size_t size);
  inline ::std::string* mutable_dip();
  inline ::std::string* release_dip();
  
  // required int32 sport = 3;
  inline bool has_sport() const;
  inline void clear_sport();
  static const int kSportFieldNumber = 3;
  inline ::google::protobuf::int32 sport() const;
  inline void set_sport(::google::protobuf::int32 value);
  
  // required int32 dport = 4;
  inline bool has_dport() const;
  inline void clear_dport();
  static const int kDportFieldNumber = 4;
  inline ::google::protobuf::int32 dport() const;
  inline void set_dport(::google::protobuf::int32 value);
  
  // required string httpurl = 5;
  inline bool has_httpurl() const;
  inline void clear_httpurl();
  static const int kHttpurlFieldNumber = 5;
  inline const ::std::string& httpurl() const;
  inline void set_httpurl(const ::std::string& value);
  inline void set_httpurl(const char* value);
  inline void set_httpurl(const char* value, size_t size);
  inline ::std::string* mutable_httpurl();
  inline ::std::string* release_httpurl();
  
  // required string datetime = 6;
  inline bool has_datetime() const;
  inline void clear_datetime();
  static const int kDatetimeFieldNumber = 6;
  inline const ::std::string& datetime() const;
  inline void set_datetime(const ::std::string& value);
  inline void set_datetime(const char* value);
  inline void set_datetime(const char* value, size_t size);
  inline ::std::string* mutable_datetime();
  inline ::std::string* release_datetime();
  
  // optional string processname = 7;
  inline bool has_processname() const;
  inline void clear_processname();
  static const int kProcessnameFieldNumber = 7;
  inline const ::std::string& processname() const;
  inline void set_processname(const ::std::string& value);
  inline void set_processname(const char* value);
  inline void set_processname(const char* value, size_t size);
  inline ::std::string* mutable_processname();
  inline ::std::string* release_processname();
  
  // optional string processmd5 = 8;
  inline bool has_processmd5() const;
  inline void clear_processmd5();
  static const int kProcessmd5FieldNumber = 8;
  inline const ::std::string& processmd5() const;
  inline void set_processmd5(const ::std::string& value);
  inline void set_processmd5(const char* value);
  inline void set_processmd5(const char* value, size_t size);
  inline ::std::string* mutable_processmd5();
  inline ::std::string* release_processmd5();
  
  // @@protoc_insertion_point(class_scope:SpyClient.HttpPacket)
 private:
  inline void set_has_sip();
  inline void clear_has_sip();
  inline void set_has_dip();
  inline void clear_has_dip();
  inline void set_has_sport();
  inline void clear_has_sport();
  inline void set_has_dport();
  inline void clear_has_dport();
  inline void set_has_httpurl();
  inline void clear_has_httpurl();
  inline void set_has_datetime();
  inline void clear_has_datetime();
  inline void set_has_processname();
  inline void clear_has_processname();
  inline void set_has_processmd5();
  inline void clear_has_processmd5();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* sip_;
  ::std::string* dip_;
  ::google::protobuf::int32 sport_;
  ::google::protobuf::int32 dport_;
  ::std::string* httpurl_;
  ::std::string* datetime_;
  ::std::string* processname_;
  ::std::string* processmd5_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoMessage_2eproto();
  friend void protobuf_AssignDesc_ProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_ProtoMessage_2eproto();
  
  void InitAsDefaultInstance();
  static HttpPacket* default_instance_;
};
// -------------------------------------------------------------------

class EmailPacket : public ::google::protobuf::Message {
 public:
  EmailPacket();
  virtual ~EmailPacket();
  
  EmailPacket(const EmailPacket& from);
  
  inline EmailPacket& operator=(const EmailPacket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailPacket& default_instance();
  
  void Swap(EmailPacket* other);
  
  // implements Message ----------------------------------------------
  
  EmailPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmailPacket& from);
  void MergeFrom(const EmailPacket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string sip = 1;
  inline bool has_sip() const;
  inline void clear_sip();
  static const int kSipFieldNumber = 1;
  inline const ::std::string& sip() const;
  inline void set_sip(const ::std::string& value);
  inline void set_sip(const char* value);
  inline void set_sip(const char* value, size_t size);
  inline ::std::string* mutable_sip();
  inline ::std::string* release_sip();
  
  // required string dip = 2;
  inline bool has_dip() const;
  inline void clear_dip();
  static const int kDipFieldNumber = 2;
  inline const ::std::string& dip() const;
  inline void set_dip(const ::std::string& value);
  inline void set_dip(const char* value);
  inline void set_dip(const char* value, size_t size);
  inline ::std::string* mutable_dip();
  inline ::std::string* release_dip();
  
  // required int32 sport = 3;
  inline bool has_sport() const;
  inline void clear_sport();
  static const int kSportFieldNumber = 3;
  inline ::google::protobuf::int32 sport() const;
  inline void set_sport(::google::protobuf::int32 value);
  
  // required int32 dport = 4;
  inline bool has_dport() const;
  inline void clear_dport();
  static const int kDportFieldNumber = 4;
  inline ::google::protobuf::int32 dport() const;
  inline void set_dport(::google::protobuf::int32 value);
  
  // required string sendto = 5;
  inline bool has_sendto() const;
  inline void clear_sendto();
  static const int kSendtoFieldNumber = 5;
  inline const ::std::string& sendto() const;
  inline void set_sendto(const ::std::string& value);
  inline void set_sendto(const char* value);
  inline void set_sendto(const char* value, size_t size);
  inline ::std::string* mutable_sendto();
  inline ::std::string* release_sendto();
  
  // optional string sendcc = 6;
  inline bool has_sendcc() const;
  inline void clear_sendcc();
  static const int kSendccFieldNumber = 6;
  inline const ::std::string& sendcc() const;
  inline void set_sendcc(const ::std::string& value);
  inline void set_sendcc(const char* value);
  inline void set_sendcc(const char* value, size_t size);
  inline ::std::string* mutable_sendcc();
  inline ::std::string* release_sendcc();
  
  // optional string sendbcc = 7;
  inline bool has_sendbcc() const;
  inline void clear_sendbcc();
  static const int kSendbccFieldNumber = 7;
  inline const ::std::string& sendbcc() const;
  inline void set_sendbcc(const ::std::string& value);
  inline void set_sendbcc(const char* value);
  inline void set_sendbcc(const char* value, size_t size);
  inline ::std::string* mutable_sendbcc();
  inline ::std::string* release_sendbcc();
  
  // required string sendfrom = 8;
  inline bool has_sendfrom() const;
  inline void clear_sendfrom();
  static const int kSendfromFieldNumber = 8;
  inline const ::std::string& sendfrom() const;
  inline void set_sendfrom(const ::std::string& value);
  inline void set_sendfrom(const char* value);
  inline void set_sendfrom(const char* value, size_t size);
  inline ::std::string* mutable_sendfrom();
  inline ::std::string* release_sendfrom();
  
  // optional string subject = 9;
  inline bool has_subject() const;
  inline void clear_subject();
  static const int kSubjectFieldNumber = 9;
  inline const ::std::string& subject() const;
  inline void set_subject(const ::std::string& value);
  inline void set_subject(const char* value);
  inline void set_subject(const char* value, size_t size);
  inline ::std::string* mutable_subject();
  inline ::std::string* release_subject();
  
  // required string datetime = 10;
  inline bool has_datetime() const;
  inline void clear_datetime();
  static const int kDatetimeFieldNumber = 10;
  inline const ::std::string& datetime() const;
  inline void set_datetime(const ::std::string& value);
  inline void set_datetime(const char* value);
  inline void set_datetime(const char* value, size_t size);
  inline ::std::string* mutable_datetime();
  inline ::std::string* release_datetime();
  
  // required int32 emailtype = 11;
  inline bool has_emailtype() const;
  inline void clear_emailtype();
  static const int kEmailtypeFieldNumber = 11;
  inline ::google::protobuf::int32 emailtype() const;
  inline void set_emailtype(::google::protobuf::int32 value);
  
  // optional string processname = 12;
  inline bool has_processname() const;
  inline void clear_processname();
  static const int kProcessnameFieldNumber = 12;
  inline const ::std::string& processname() const;
  inline void set_processname(const ::std::string& value);
  inline void set_processname(const char* value);
  inline void set_processname(const char* value, size_t size);
  inline ::std::string* mutable_processname();
  inline ::std::string* release_processname();
  
  // optional string processmd5 = 13;
  inline bool has_processmd5() const;
  inline void clear_processmd5();
  static const int kProcessmd5FieldNumber = 13;
  inline const ::std::string& processmd5() const;
  inline void set_processmd5(const ::std::string& value);
  inline void set_processmd5(const char* value);
  inline void set_processmd5(const char* value, size_t size);
  inline ::std::string* mutable_processmd5();
  inline ::std::string* release_processmd5();
  
  // @@protoc_insertion_point(class_scope:SpyClient.EmailPacket)
 private:
  inline void set_has_sip();
  inline void clear_has_sip();
  inline void set_has_dip();
  inline void clear_has_dip();
  inline void set_has_sport();
  inline void clear_has_sport();
  inline void set_has_dport();
  inline void clear_has_dport();
  inline void set_has_sendto();
  inline void clear_has_sendto();
  inline void set_has_sendcc();
  inline void clear_has_sendcc();
  inline void set_has_sendbcc();
  inline void clear_has_sendbcc();
  inline void set_has_sendfrom();
  inline void clear_has_sendfrom();
  inline void set_has_subject();
  inline void clear_has_subject();
  inline void set_has_datetime();
  inline void clear_has_datetime();
  inline void set_has_emailtype();
  inline void clear_has_emailtype();
  inline void set_has_processname();
  inline void clear_has_processname();
  inline void set_has_processmd5();
  inline void clear_has_processmd5();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* sip_;
  ::std::string* dip_;
  ::google::protobuf::int32 sport_;
  ::google::protobuf::int32 dport_;
  ::std::string* sendto_;
  ::std::string* sendcc_;
  ::std::string* sendbcc_;
  ::std::string* sendfrom_;
  ::std::string* subject_;
  ::std::string* datetime_;
  ::std::string* processname_;
  ::std::string* processmd5_;
  ::google::protobuf::int32 emailtype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoMessage_2eproto();
  friend void protobuf_AssignDesc_ProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_ProtoMessage_2eproto();
  
  void InitAsDefaultInstance();
  static EmailPacket* default_instance_;
};
// -------------------------------------------------------------------

class WhiteProcess : public ::google::protobuf::Message {
 public:
  WhiteProcess();
  virtual ~WhiteProcess();
  
  WhiteProcess(const WhiteProcess& from);
  
  inline WhiteProcess& operator=(const WhiteProcess& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WhiteProcess& default_instance();
  
  void Swap(WhiteProcess* other);
  
  // implements Message ----------------------------------------------
  
  WhiteProcess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WhiteProcess& from);
  void MergeFrom(const WhiteProcess& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string processname = 1;
  inline bool has_processname() const;
  inline void clear_processname();
  static const int kProcessnameFieldNumber = 1;
  inline const ::std::string& processname() const;
  inline void set_processname(const ::std::string& value);
  inline void set_processname(const char* value);
  inline void set_processname(const char* value, size_t size);
  inline ::std::string* mutable_processname();
  inline ::std::string* release_processname();
  
  // required string version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // required string processmd5 = 3;
  inline bool has_processmd5() const;
  inline void clear_processmd5();
  static const int kProcessmd5FieldNumber = 3;
  inline const ::std::string& processmd5() const;
  inline void set_processmd5(const ::std::string& value);
  inline void set_processmd5(const char* value);
  inline void set_processmd5(const char* value, size_t size);
  inline ::std::string* mutable_processmd5();
  inline ::std::string* release_processmd5();
  
  // required string addtime = 4;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 4;
  inline const ::std::string& addtime() const;
  inline void set_addtime(const ::std::string& value);
  inline void set_addtime(const char* value);
  inline void set_addtime(const char* value, size_t size);
  inline ::std::string* mutable_addtime();
  inline ::std::string* release_addtime();
  
  // @@protoc_insertion_point(class_scope:SpyClient.WhiteProcess)
 private:
  inline void set_has_processname();
  inline void clear_has_processname();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_processmd5();
  inline void clear_has_processmd5();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* processname_;
  ::std::string* version_;
  ::std::string* processmd5_;
  ::std::string* addtime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoMessage_2eproto();
  friend void protobuf_AssignDesc_ProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_ProtoMessage_2eproto();
  
  void InitAsDefaultInstance();
  static WhiteProcess* default_instance_;
};
// -------------------------------------------------------------------

class TrojanPacket : public ::google::protobuf::Message {
 public:
  TrojanPacket();
  virtual ~TrojanPacket();
  
  TrojanPacket(const TrojanPacket& from);
  
  inline TrojanPacket& operator=(const TrojanPacket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrojanPacket& default_instance();
  
  void Swap(TrojanPacket* other);
  
  // implements Message ----------------------------------------------
  
  TrojanPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrojanPacket& from);
  void MergeFrom(const TrojanPacket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SpyClient.TrojanPacket)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoMessage_2eproto();
  friend void protobuf_AssignDesc_ProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_ProtoMessage_2eproto();
  
  void InitAsDefaultInstance();
  static TrojanPacket* default_instance_;
};
// ===================================================================


// ===================================================================

// IpPacket

// required .SpyClient.PhoneType protocoltype = 1;
inline bool IpPacket::has_protocoltype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpPacket::set_has_protocoltype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpPacket::clear_has_protocoltype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpPacket::clear_protocoltype() {
  protocoltype_ = 0;
  clear_has_protocoltype();
}
inline SpyClient::PhoneType IpPacket::protocoltype() const {
  return static_cast< SpyClient::PhoneType >(protocoltype_);
}
inline void IpPacket::set_protocoltype(SpyClient::PhoneType value) {
  GOOGLE_DCHECK(SpyClient::PhoneType_IsValid(value));
  set_has_protocoltype();
  protocoltype_ = value;
}

// required string sip = 2;
inline bool IpPacket::has_sip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpPacket::set_has_sip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpPacket::clear_has_sip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpPacket::clear_sip() {
  if (sip_ != &::google::protobuf::internal::kEmptyString) {
    sip_->clear();
  }
  clear_has_sip();
}
inline const ::std::string& IpPacket::sip() const {
  return *sip_;
}
inline void IpPacket::set_sip(const ::std::string& value) {
  set_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    sip_ = new ::std::string;
  }
  sip_->assign(value);
}
inline void IpPacket::set_sip(const char* value) {
  set_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    sip_ = new ::std::string;
  }
  sip_->assign(value);
}
inline void IpPacket::set_sip(const char* value, size_t size) {
  set_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    sip_ = new ::std::string;
  }
  sip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpPacket::mutable_sip() {
  set_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    sip_ = new ::std::string;
  }
  return sip_;
}
inline ::std::string* IpPacket::release_sip() {
  clear_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sip_;
    sip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string dip = 3;
inline bool IpPacket::has_dip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpPacket::set_has_dip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpPacket::clear_has_dip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpPacket::clear_dip() {
  if (dip_ != &::google::protobuf::internal::kEmptyString) {
    dip_->clear();
  }
  clear_has_dip();
}
inline const ::std::string& IpPacket::dip() const {
  return *dip_;
}
inline void IpPacket::set_dip(const ::std::string& value) {
  set_has_dip();
  if (dip_ == &::google::protobuf::internal::kEmptyString) {
    dip_ = new ::std::string;
  }
  dip_->assign(value);
}
inline void IpPacket::set_dip(const char* value) {
  set_has_dip();
  if (dip_ == &::google::protobuf::internal::kEmptyString) {
    dip_ = new ::std::string;
  }
  dip_->assign(value);
}
inline void IpPacket::set_dip(const char* value, size_t size) {
  set_has_dip();
  if (dip_ == &::google::protobuf::internal::kEmptyString) {
    dip_ = new ::std::string;
  }
  dip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpPacket::mutable_dip() {
  set_has_dip();
  if (dip_ == &::google::protobuf::internal::kEmptyString) {
    dip_ = new ::std::string;
  }
  return dip_;
}
inline ::std::string* IpPacket::release_dip() {
  clear_has_dip();
  if (dip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dip_;
    dip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 sport = 4;
inline bool IpPacket::has_sport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpPacket::set_has_sport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpPacket::clear_has_sport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpPacket::clear_sport() {
  sport_ = 0;
  clear_has_sport();
}
inline ::google::protobuf::int32 IpPacket::sport() const {
  return sport_;
}
inline void IpPacket::set_sport(::google::protobuf::int32 value) {
  set_has_sport();
  sport_ = value;
}

// required int32 dport = 5;
inline bool IpPacket::has_dport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IpPacket::set_has_dport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IpPacket::clear_has_dport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IpPacket::clear_dport() {
  dport_ = 0;
  clear_has_dport();
}
inline ::google::protobuf::int32 IpPacket::dport() const {
  return dport_;
}
inline void IpPacket::set_dport(::google::protobuf::int32 value) {
  set_has_dport();
  dport_ = value;
}

// required int32 flow = 6;
inline bool IpPacket::has_flow() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IpPacket::set_has_flow() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IpPacket::clear_has_flow() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IpPacket::clear_flow() {
  flow_ = 0;
  clear_has_flow();
}
inline ::google::protobuf::int32 IpPacket::flow() const {
  return flow_;
}
inline void IpPacket::set_flow(::google::protobuf::int32 value) {
  set_has_flow();
  flow_ = value;
}

// required string datetime = 7;
inline bool IpPacket::has_datetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IpPacket::set_has_datetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IpPacket::clear_has_datetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IpPacket::clear_datetime() {
  if (datetime_ != &::google::protobuf::internal::kEmptyString) {
    datetime_->clear();
  }
  clear_has_datetime();
}
inline const ::std::string& IpPacket::datetime() const {
  return *datetime_;
}
inline void IpPacket::set_datetime(const ::std::string& value) {
  set_has_datetime();
  if (datetime_ == &::google::protobuf::internal::kEmptyString) {
    datetime_ = new ::std::string;
  }
  datetime_->assign(value);
}
inline void IpPacket::set_datetime(const char* value) {
  set_has_datetime();
  if (datetime_ == &::google::protobuf::internal::kEmptyString) {
    datetime_ = new ::std::string;
  }
  datetime_->assign(value);
}
inline void IpPacket::set_datetime(const char* value, size_t size) {
  set_has_datetime();
  if (datetime_ == &::google::protobuf::internal::kEmptyString) {
    datetime_ = new ::std::string;
  }
  datetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpPacket::mutable_datetime() {
  set_has_datetime();
  if (datetime_ == &::google::protobuf::internal::kEmptyString) {
    datetime_ = new ::std::string;
  }
  return datetime_;
}
inline ::std::string* IpPacket::release_datetime() {
  clear_has_datetime();
  if (datetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datetime_;
    datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 length = 8;
inline bool IpPacket::has_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IpPacket::set_has_length() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IpPacket::clear_has_length() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IpPacket::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 IpPacket::length() const {
  return length_;
}
inline void IpPacket::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
}

// optional string processname = 9;
inline bool IpPacket::has_processname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IpPacket::set_has_processname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IpPacket::clear_has_processname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IpPacket::clear_processname() {
  if (processname_ != &::google::protobuf::internal::kEmptyString) {
    processname_->clear();
  }
  clear_has_processname();
}
inline const ::std::string& IpPacket::processname() const {
  return *processname_;
}
inline void IpPacket::set_processname(const ::std::string& value) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    processname_ = new ::std::string;
  }
  processname_->assign(value);
}
inline void IpPacket::set_processname(const char* value) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    processname_ = new ::std::string;
  }
  processname_->assign(value);
}
inline void IpPacket::set_processname(const char* value, size_t size) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    processname_ = new ::std::string;
  }
  processname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpPacket::mutable_processname() {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    processname_ = new ::std::string;
  }
  return processname_;
}
inline ::std::string* IpPacket::release_processname() {
  clear_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = processname_;
    processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string processmd5 = 10;
inline bool IpPacket::has_processmd5() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IpPacket::set_has_processmd5() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IpPacket::clear_has_processmd5() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IpPacket::clear_processmd5() {
  if (processmd5_ != &::google::protobuf::internal::kEmptyString) {
    processmd5_->clear();
  }
  clear_has_processmd5();
}
inline const ::std::string& IpPacket::processmd5() const {
  return *processmd5_;
}
inline void IpPacket::set_processmd5(const ::std::string& value) {
  set_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    processmd5_ = new ::std::string;
  }
  processmd5_->assign(value);
}
inline void IpPacket::set_processmd5(const char* value) {
  set_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    processmd5_ = new ::std::string;
  }
  processmd5_->assign(value);
}
inline void IpPacket::set_processmd5(const char* value, size_t size) {
  set_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    processmd5_ = new ::std::string;
  }
  processmd5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpPacket::mutable_processmd5() {
  set_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    processmd5_ = new ::std::string;
  }
  return processmd5_;
}
inline ::std::string* IpPacket::release_processmd5() {
  clear_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = processmd5_;
    processmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// HttpPacket

// required string sip = 1;
inline bool HttpPacket::has_sip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HttpPacket::set_has_sip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HttpPacket::clear_has_sip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HttpPacket::clear_sip() {
  if (sip_ != &::google::protobuf::internal::kEmptyString) {
    sip_->clear();
  }
  clear_has_sip();
}
inline const ::std::string& HttpPacket::sip() const {
  return *sip_;
}
inline void HttpPacket::set_sip(const ::std::string& value) {
  set_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    sip_ = new ::std::string;
  }
  sip_->assign(value);
}
inline void HttpPacket::set_sip(const char* value) {
  set_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    sip_ = new ::std::string;
  }
  sip_->assign(value);
}
inline void HttpPacket::set_sip(const char* value, size_t size) {
  set_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    sip_ = new ::std::string;
  }
  sip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpPacket::mutable_sip() {
  set_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    sip_ = new ::std::string;
  }
  return sip_;
}
inline ::std::string* HttpPacket::release_sip() {
  clear_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sip_;
    sip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string dip = 2;
inline bool HttpPacket::has_dip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HttpPacket::set_has_dip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HttpPacket::clear_has_dip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HttpPacket::clear_dip() {
  if (dip_ != &::google::protobuf::internal::kEmptyString) {
    dip_->clear();
  }
  clear_has_dip();
}
inline const ::std::string& HttpPacket::dip() const {
  return *dip_;
}
inline void HttpPacket::set_dip(const ::std::string& value) {
  set_has_dip();
  if (dip_ == &::google::protobuf::internal::kEmptyString) {
    dip_ = new ::std::string;
  }
  dip_->assign(value);
}
inline void HttpPacket::set_dip(const char* value) {
  set_has_dip();
  if (dip_ == &::google::protobuf::internal::kEmptyString) {
    dip_ = new ::std::string;
  }
  dip_->assign(value);
}
inline void HttpPacket::set_dip(const char* value, size_t size) {
  set_has_dip();
  if (dip_ == &::google::protobuf::internal::kEmptyString) {
    dip_ = new ::std::string;
  }
  dip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpPacket::mutable_dip() {
  set_has_dip();
  if (dip_ == &::google::protobuf::internal::kEmptyString) {
    dip_ = new ::std::string;
  }
  return dip_;
}
inline ::std::string* HttpPacket::release_dip() {
  clear_has_dip();
  if (dip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dip_;
    dip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 sport = 3;
inline bool HttpPacket::has_sport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HttpPacket::set_has_sport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HttpPacket::clear_has_sport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HttpPacket::clear_sport() {
  sport_ = 0;
  clear_has_sport();
}
inline ::google::protobuf::int32 HttpPacket::sport() const {
  return sport_;
}
inline void HttpPacket::set_sport(::google::protobuf::int32 value) {
  set_has_sport();
  sport_ = value;
}

// required int32 dport = 4;
inline bool HttpPacket::has_dport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HttpPacket::set_has_dport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HttpPacket::clear_has_dport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HttpPacket::clear_dport() {
  dport_ = 0;
  clear_has_dport();
}
inline ::google::protobuf::int32 HttpPacket::dport() const {
  return dport_;
}
inline void HttpPacket::set_dport(::google::protobuf::int32 value) {
  set_has_dport();
  dport_ = value;
}

// required string httpurl = 5;
inline bool HttpPacket::has_httpurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HttpPacket::set_has_httpurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HttpPacket::clear_has_httpurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HttpPacket::clear_httpurl() {
  if (httpurl_ != &::google::protobuf::internal::kEmptyString) {
    httpurl_->clear();
  }
  clear_has_httpurl();
}
inline const ::std::string& HttpPacket::httpurl() const {
  return *httpurl_;
}
inline void HttpPacket::set_httpurl(const ::std::string& value) {
  set_has_httpurl();
  if (httpurl_ == &::google::protobuf::internal::kEmptyString) {
    httpurl_ = new ::std::string;
  }
  httpurl_->assign(value);
}
inline void HttpPacket::set_httpurl(const char* value) {
  set_has_httpurl();
  if (httpurl_ == &::google::protobuf::internal::kEmptyString) {
    httpurl_ = new ::std::string;
  }
  httpurl_->assign(value);
}
inline void HttpPacket::set_httpurl(const char* value, size_t size) {
  set_has_httpurl();
  if (httpurl_ == &::google::protobuf::internal::kEmptyString) {
    httpurl_ = new ::std::string;
  }
  httpurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpPacket::mutable_httpurl() {
  set_has_httpurl();
  if (httpurl_ == &::google::protobuf::internal::kEmptyString) {
    httpurl_ = new ::std::string;
  }
  return httpurl_;
}
inline ::std::string* HttpPacket::release_httpurl() {
  clear_has_httpurl();
  if (httpurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = httpurl_;
    httpurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string datetime = 6;
inline bool HttpPacket::has_datetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HttpPacket::set_has_datetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HttpPacket::clear_has_datetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HttpPacket::clear_datetime() {
  if (datetime_ != &::google::protobuf::internal::kEmptyString) {
    datetime_->clear();
  }
  clear_has_datetime();
}
inline const ::std::string& HttpPacket::datetime() const {
  return *datetime_;
}
inline void HttpPacket::set_datetime(const ::std::string& value) {
  set_has_datetime();
  if (datetime_ == &::google::protobuf::internal::kEmptyString) {
    datetime_ = new ::std::string;
  }
  datetime_->assign(value);
}
inline void HttpPacket::set_datetime(const char* value) {
  set_has_datetime();
  if (datetime_ == &::google::protobuf::internal::kEmptyString) {
    datetime_ = new ::std::string;
  }
  datetime_->assign(value);
}
inline void HttpPacket::set_datetime(const char* value, size_t size) {
  set_has_datetime();
  if (datetime_ == &::google::protobuf::internal::kEmptyString) {
    datetime_ = new ::std::string;
  }
  datetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpPacket::mutable_datetime() {
  set_has_datetime();
  if (datetime_ == &::google::protobuf::internal::kEmptyString) {
    datetime_ = new ::std::string;
  }
  return datetime_;
}
inline ::std::string* HttpPacket::release_datetime() {
  clear_has_datetime();
  if (datetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datetime_;
    datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string processname = 7;
inline bool HttpPacket::has_processname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HttpPacket::set_has_processname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HttpPacket::clear_has_processname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HttpPacket::clear_processname() {
  if (processname_ != &::google::protobuf::internal::kEmptyString) {
    processname_->clear();
  }
  clear_has_processname();
}
inline const ::std::string& HttpPacket::processname() const {
  return *processname_;
}
inline void HttpPacket::set_processname(const ::std::string& value) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    processname_ = new ::std::string;
  }
  processname_->assign(value);
}
inline void HttpPacket::set_processname(const char* value) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    processname_ = new ::std::string;
  }
  processname_->assign(value);
}
inline void HttpPacket::set_processname(const char* value, size_t size) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    processname_ = new ::std::string;
  }
  processname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpPacket::mutable_processname() {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    processname_ = new ::std::string;
  }
  return processname_;
}
inline ::std::string* HttpPacket::release_processname() {
  clear_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = processname_;
    processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string processmd5 = 8;
inline bool HttpPacket::has_processmd5() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HttpPacket::set_has_processmd5() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HttpPacket::clear_has_processmd5() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HttpPacket::clear_processmd5() {
  if (processmd5_ != &::google::protobuf::internal::kEmptyString) {
    processmd5_->clear();
  }
  clear_has_processmd5();
}
inline const ::std::string& HttpPacket::processmd5() const {
  return *processmd5_;
}
inline void HttpPacket::set_processmd5(const ::std::string& value) {
  set_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    processmd5_ = new ::std::string;
  }
  processmd5_->assign(value);
}
inline void HttpPacket::set_processmd5(const char* value) {
  set_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    processmd5_ = new ::std::string;
  }
  processmd5_->assign(value);
}
inline void HttpPacket::set_processmd5(const char* value, size_t size) {
  set_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    processmd5_ = new ::std::string;
  }
  processmd5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpPacket::mutable_processmd5() {
  set_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    processmd5_ = new ::std::string;
  }
  return processmd5_;
}
inline ::std::string* HttpPacket::release_processmd5() {
  clear_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = processmd5_;
    processmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// EmailPacket

// required string sip = 1;
inline bool EmailPacket::has_sip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmailPacket::set_has_sip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmailPacket::clear_has_sip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmailPacket::clear_sip() {
  if (sip_ != &::google::protobuf::internal::kEmptyString) {
    sip_->clear();
  }
  clear_has_sip();
}
inline const ::std::string& EmailPacket::sip() const {
  return *sip_;
}
inline void EmailPacket::set_sip(const ::std::string& value) {
  set_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    sip_ = new ::std::string;
  }
  sip_->assign(value);
}
inline void EmailPacket::set_sip(const char* value) {
  set_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    sip_ = new ::std::string;
  }
  sip_->assign(value);
}
inline void EmailPacket::set_sip(const char* value, size_t size) {
  set_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    sip_ = new ::std::string;
  }
  sip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EmailPacket::mutable_sip() {
  set_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    sip_ = new ::std::string;
  }
  return sip_;
}
inline ::std::string* EmailPacket::release_sip() {
  clear_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sip_;
    sip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string dip = 2;
inline bool EmailPacket::has_dip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmailPacket::set_has_dip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmailPacket::clear_has_dip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmailPacket::clear_dip() {
  if (dip_ != &::google::protobuf::internal::kEmptyString) {
    dip_->clear();
  }
  clear_has_dip();
}
inline const ::std::string& EmailPacket::dip() const {
  return *dip_;
}
inline void EmailPacket::set_dip(const ::std::string& value) {
  set_has_dip();
  if (dip_ == &::google::protobuf::internal::kEmptyString) {
    dip_ = new ::std::string;
  }
  dip_->assign(value);
}
inline void EmailPacket::set_dip(const char* value) {
  set_has_dip();
  if (dip_ == &::google::protobuf::internal::kEmptyString) {
    dip_ = new ::std::string;
  }
  dip_->assign(value);
}
inline void EmailPacket::set_dip(const char* value, size_t size) {
  set_has_dip();
  if (dip_ == &::google::protobuf::internal::kEmptyString) {
    dip_ = new ::std::string;
  }
  dip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EmailPacket::mutable_dip() {
  set_has_dip();
  if (dip_ == &::google::protobuf::internal::kEmptyString) {
    dip_ = new ::std::string;
  }
  return dip_;
}
inline ::std::string* EmailPacket::release_dip() {
  clear_has_dip();
  if (dip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dip_;
    dip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 sport = 3;
inline bool EmailPacket::has_sport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmailPacket::set_has_sport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmailPacket::clear_has_sport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmailPacket::clear_sport() {
  sport_ = 0;
  clear_has_sport();
}
inline ::google::protobuf::int32 EmailPacket::sport() const {
  return sport_;
}
inline void EmailPacket::set_sport(::google::protobuf::int32 value) {
  set_has_sport();
  sport_ = value;
}

// required int32 dport = 4;
inline bool EmailPacket::has_dport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmailPacket::set_has_dport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmailPacket::clear_has_dport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmailPacket::clear_dport() {
  dport_ = 0;
  clear_has_dport();
}
inline ::google::protobuf::int32 EmailPacket::dport() const {
  return dport_;
}
inline void EmailPacket::set_dport(::google::protobuf::int32 value) {
  set_has_dport();
  dport_ = value;
}

// required string sendto = 5;
inline bool EmailPacket::has_sendto() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EmailPacket::set_has_sendto() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EmailPacket::clear_has_sendto() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EmailPacket::clear_sendto() {
  if (sendto_ != &::google::protobuf::internal::kEmptyString) {
    sendto_->clear();
  }
  clear_has_sendto();
}
inline const ::std::string& EmailPacket::sendto() const {
  return *sendto_;
}
inline void EmailPacket::set_sendto(const ::std::string& value) {
  set_has_sendto();
  if (sendto_ == &::google::protobuf::internal::kEmptyString) {
    sendto_ = new ::std::string;
  }
  sendto_->assign(value);
}
inline void EmailPacket::set_sendto(const char* value) {
  set_has_sendto();
  if (sendto_ == &::google::protobuf::internal::kEmptyString) {
    sendto_ = new ::std::string;
  }
  sendto_->assign(value);
}
inline void EmailPacket::set_sendto(const char* value, size_t size) {
  set_has_sendto();
  if (sendto_ == &::google::protobuf::internal::kEmptyString) {
    sendto_ = new ::std::string;
  }
  sendto_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EmailPacket::mutable_sendto() {
  set_has_sendto();
  if (sendto_ == &::google::protobuf::internal::kEmptyString) {
    sendto_ = new ::std::string;
  }
  return sendto_;
}
inline ::std::string* EmailPacket::release_sendto() {
  clear_has_sendto();
  if (sendto_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendto_;
    sendto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sendcc = 6;
inline bool EmailPacket::has_sendcc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EmailPacket::set_has_sendcc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EmailPacket::clear_has_sendcc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EmailPacket::clear_sendcc() {
  if (sendcc_ != &::google::protobuf::internal::kEmptyString) {
    sendcc_->clear();
  }
  clear_has_sendcc();
}
inline const ::std::string& EmailPacket::sendcc() const {
  return *sendcc_;
}
inline void EmailPacket::set_sendcc(const ::std::string& value) {
  set_has_sendcc();
  if (sendcc_ == &::google::protobuf::internal::kEmptyString) {
    sendcc_ = new ::std::string;
  }
  sendcc_->assign(value);
}
inline void EmailPacket::set_sendcc(const char* value) {
  set_has_sendcc();
  if (sendcc_ == &::google::protobuf::internal::kEmptyString) {
    sendcc_ = new ::std::string;
  }
  sendcc_->assign(value);
}
inline void EmailPacket::set_sendcc(const char* value, size_t size) {
  set_has_sendcc();
  if (sendcc_ == &::google::protobuf::internal::kEmptyString) {
    sendcc_ = new ::std::string;
  }
  sendcc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EmailPacket::mutable_sendcc() {
  set_has_sendcc();
  if (sendcc_ == &::google::protobuf::internal::kEmptyString) {
    sendcc_ = new ::std::string;
  }
  return sendcc_;
}
inline ::std::string* EmailPacket::release_sendcc() {
  clear_has_sendcc();
  if (sendcc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendcc_;
    sendcc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sendbcc = 7;
inline bool EmailPacket::has_sendbcc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EmailPacket::set_has_sendbcc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EmailPacket::clear_has_sendbcc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EmailPacket::clear_sendbcc() {
  if (sendbcc_ != &::google::protobuf::internal::kEmptyString) {
    sendbcc_->clear();
  }
  clear_has_sendbcc();
}
inline const ::std::string& EmailPacket::sendbcc() const {
  return *sendbcc_;
}
inline void EmailPacket::set_sendbcc(const ::std::string& value) {
  set_has_sendbcc();
  if (sendbcc_ == &::google::protobuf::internal::kEmptyString) {
    sendbcc_ = new ::std::string;
  }
  sendbcc_->assign(value);
}
inline void EmailPacket::set_sendbcc(const char* value) {
  set_has_sendbcc();
  if (sendbcc_ == &::google::protobuf::internal::kEmptyString) {
    sendbcc_ = new ::std::string;
  }
  sendbcc_->assign(value);
}
inline void EmailPacket::set_sendbcc(const char* value, size_t size) {
  set_has_sendbcc();
  if (sendbcc_ == &::google::protobuf::internal::kEmptyString) {
    sendbcc_ = new ::std::string;
  }
  sendbcc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EmailPacket::mutable_sendbcc() {
  set_has_sendbcc();
  if (sendbcc_ == &::google::protobuf::internal::kEmptyString) {
    sendbcc_ = new ::std::string;
  }
  return sendbcc_;
}
inline ::std::string* EmailPacket::release_sendbcc() {
  clear_has_sendbcc();
  if (sendbcc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendbcc_;
    sendbcc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string sendfrom = 8;
inline bool EmailPacket::has_sendfrom() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EmailPacket::set_has_sendfrom() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EmailPacket::clear_has_sendfrom() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EmailPacket::clear_sendfrom() {
  if (sendfrom_ != &::google::protobuf::internal::kEmptyString) {
    sendfrom_->clear();
  }
  clear_has_sendfrom();
}
inline const ::std::string& EmailPacket::sendfrom() const {
  return *sendfrom_;
}
inline void EmailPacket::set_sendfrom(const ::std::string& value) {
  set_has_sendfrom();
  if (sendfrom_ == &::google::protobuf::internal::kEmptyString) {
    sendfrom_ = new ::std::string;
  }
  sendfrom_->assign(value);
}
inline void EmailPacket::set_sendfrom(const char* value) {
  set_has_sendfrom();
  if (sendfrom_ == &::google::protobuf::internal::kEmptyString) {
    sendfrom_ = new ::std::string;
  }
  sendfrom_->assign(value);
}
inline void EmailPacket::set_sendfrom(const char* value, size_t size) {
  set_has_sendfrom();
  if (sendfrom_ == &::google::protobuf::internal::kEmptyString) {
    sendfrom_ = new ::std::string;
  }
  sendfrom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EmailPacket::mutable_sendfrom() {
  set_has_sendfrom();
  if (sendfrom_ == &::google::protobuf::internal::kEmptyString) {
    sendfrom_ = new ::std::string;
  }
  return sendfrom_;
}
inline ::std::string* EmailPacket::release_sendfrom() {
  clear_has_sendfrom();
  if (sendfrom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendfrom_;
    sendfrom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string subject = 9;
inline bool EmailPacket::has_subject() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EmailPacket::set_has_subject() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EmailPacket::clear_has_subject() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EmailPacket::clear_subject() {
  if (subject_ != &::google::protobuf::internal::kEmptyString) {
    subject_->clear();
  }
  clear_has_subject();
}
inline const ::std::string& EmailPacket::subject() const {
  return *subject_;
}
inline void EmailPacket::set_subject(const ::std::string& value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
}
inline void EmailPacket::set_subject(const char* value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
}
inline void EmailPacket::set_subject(const char* value, size_t size) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EmailPacket::mutable_subject() {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  return subject_;
}
inline ::std::string* EmailPacket::release_subject() {
  clear_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subject_;
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string datetime = 10;
inline bool EmailPacket::has_datetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EmailPacket::set_has_datetime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EmailPacket::clear_has_datetime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EmailPacket::clear_datetime() {
  if (datetime_ != &::google::protobuf::internal::kEmptyString) {
    datetime_->clear();
  }
  clear_has_datetime();
}
inline const ::std::string& EmailPacket::datetime() const {
  return *datetime_;
}
inline void EmailPacket::set_datetime(const ::std::string& value) {
  set_has_datetime();
  if (datetime_ == &::google::protobuf::internal::kEmptyString) {
    datetime_ = new ::std::string;
  }
  datetime_->assign(value);
}
inline void EmailPacket::set_datetime(const char* value) {
  set_has_datetime();
  if (datetime_ == &::google::protobuf::internal::kEmptyString) {
    datetime_ = new ::std::string;
  }
  datetime_->assign(value);
}
inline void EmailPacket::set_datetime(const char* value, size_t size) {
  set_has_datetime();
  if (datetime_ == &::google::protobuf::internal::kEmptyString) {
    datetime_ = new ::std::string;
  }
  datetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EmailPacket::mutable_datetime() {
  set_has_datetime();
  if (datetime_ == &::google::protobuf::internal::kEmptyString) {
    datetime_ = new ::std::string;
  }
  return datetime_;
}
inline ::std::string* EmailPacket::release_datetime() {
  clear_has_datetime();
  if (datetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datetime_;
    datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 emailtype = 11;
inline bool EmailPacket::has_emailtype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EmailPacket::set_has_emailtype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EmailPacket::clear_has_emailtype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EmailPacket::clear_emailtype() {
  emailtype_ = 0;
  clear_has_emailtype();
}
inline ::google::protobuf::int32 EmailPacket::emailtype() const {
  return emailtype_;
}
inline void EmailPacket::set_emailtype(::google::protobuf::int32 value) {
  set_has_emailtype();
  emailtype_ = value;
}

// optional string processname = 12;
inline bool EmailPacket::has_processname() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EmailPacket::set_has_processname() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EmailPacket::clear_has_processname() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EmailPacket::clear_processname() {
  if (processname_ != &::google::protobuf::internal::kEmptyString) {
    processname_->clear();
  }
  clear_has_processname();
}
inline const ::std::string& EmailPacket::processname() const {
  return *processname_;
}
inline void EmailPacket::set_processname(const ::std::string& value) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    processname_ = new ::std::string;
  }
  processname_->assign(value);
}
inline void EmailPacket::set_processname(const char* value) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    processname_ = new ::std::string;
  }
  processname_->assign(value);
}
inline void EmailPacket::set_processname(const char* value, size_t size) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    processname_ = new ::std::string;
  }
  processname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EmailPacket::mutable_processname() {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    processname_ = new ::std::string;
  }
  return processname_;
}
inline ::std::string* EmailPacket::release_processname() {
  clear_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = processname_;
    processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string processmd5 = 13;
inline bool EmailPacket::has_processmd5() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EmailPacket::set_has_processmd5() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EmailPacket::clear_has_processmd5() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EmailPacket::clear_processmd5() {
  if (processmd5_ != &::google::protobuf::internal::kEmptyString) {
    processmd5_->clear();
  }
  clear_has_processmd5();
}
inline const ::std::string& EmailPacket::processmd5() const {
  return *processmd5_;
}
inline void EmailPacket::set_processmd5(const ::std::string& value) {
  set_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    processmd5_ = new ::std::string;
  }
  processmd5_->assign(value);
}
inline void EmailPacket::set_processmd5(const char* value) {
  set_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    processmd5_ = new ::std::string;
  }
  processmd5_->assign(value);
}
inline void EmailPacket::set_processmd5(const char* value, size_t size) {
  set_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    processmd5_ = new ::std::string;
  }
  processmd5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EmailPacket::mutable_processmd5() {
  set_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    processmd5_ = new ::std::string;
  }
  return processmd5_;
}
inline ::std::string* EmailPacket::release_processmd5() {
  clear_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = processmd5_;
    processmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// WhiteProcess

// required string processname = 1;
inline bool WhiteProcess::has_processname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WhiteProcess::set_has_processname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WhiteProcess::clear_has_processname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WhiteProcess::clear_processname() {
  if (processname_ != &::google::protobuf::internal::kEmptyString) {
    processname_->clear();
  }
  clear_has_processname();
}
inline const ::std::string& WhiteProcess::processname() const {
  return *processname_;
}
inline void WhiteProcess::set_processname(const ::std::string& value) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    processname_ = new ::std::string;
  }
  processname_->assign(value);
}
inline void WhiteProcess::set_processname(const char* value) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    processname_ = new ::std::string;
  }
  processname_->assign(value);
}
inline void WhiteProcess::set_processname(const char* value, size_t size) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    processname_ = new ::std::string;
  }
  processname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WhiteProcess::mutable_processname() {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    processname_ = new ::std::string;
  }
  return processname_;
}
inline ::std::string* WhiteProcess::release_processname() {
  clear_has_processname();
  if (processname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = processname_;
    processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string version = 2;
inline bool WhiteProcess::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WhiteProcess::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WhiteProcess::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WhiteProcess::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& WhiteProcess::version() const {
  return *version_;
}
inline void WhiteProcess::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void WhiteProcess::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void WhiteProcess::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WhiteProcess::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* WhiteProcess::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string processmd5 = 3;
inline bool WhiteProcess::has_processmd5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WhiteProcess::set_has_processmd5() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WhiteProcess::clear_has_processmd5() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WhiteProcess::clear_processmd5() {
  if (processmd5_ != &::google::protobuf::internal::kEmptyString) {
    processmd5_->clear();
  }
  clear_has_processmd5();
}
inline const ::std::string& WhiteProcess::processmd5() const {
  return *processmd5_;
}
inline void WhiteProcess::set_processmd5(const ::std::string& value) {
  set_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    processmd5_ = new ::std::string;
  }
  processmd5_->assign(value);
}
inline void WhiteProcess::set_processmd5(const char* value) {
  set_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    processmd5_ = new ::std::string;
  }
  processmd5_->assign(value);
}
inline void WhiteProcess::set_processmd5(const char* value, size_t size) {
  set_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    processmd5_ = new ::std::string;
  }
  processmd5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WhiteProcess::mutable_processmd5() {
  set_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    processmd5_ = new ::std::string;
  }
  return processmd5_;
}
inline ::std::string* WhiteProcess::release_processmd5() {
  clear_has_processmd5();
  if (processmd5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = processmd5_;
    processmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string addtime = 4;
inline bool WhiteProcess::has_addtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WhiteProcess::set_has_addtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WhiteProcess::clear_has_addtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WhiteProcess::clear_addtime() {
  if (addtime_ != &::google::protobuf::internal::kEmptyString) {
    addtime_->clear();
  }
  clear_has_addtime();
}
inline const ::std::string& WhiteProcess::addtime() const {
  return *addtime_;
}
inline void WhiteProcess::set_addtime(const ::std::string& value) {
  set_has_addtime();
  if (addtime_ == &::google::protobuf::internal::kEmptyString) {
    addtime_ = new ::std::string;
  }
  addtime_->assign(value);
}
inline void WhiteProcess::set_addtime(const char* value) {
  set_has_addtime();
  if (addtime_ == &::google::protobuf::internal::kEmptyString) {
    addtime_ = new ::std::string;
  }
  addtime_->assign(value);
}
inline void WhiteProcess::set_addtime(const char* value, size_t size) {
  set_has_addtime();
  if (addtime_ == &::google::protobuf::internal::kEmptyString) {
    addtime_ = new ::std::string;
  }
  addtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WhiteProcess::mutable_addtime() {
  set_has_addtime();
  if (addtime_ == &::google::protobuf::internal::kEmptyString) {
    addtime_ = new ::std::string;
  }
  return addtime_;
}
inline ::std::string* WhiteProcess::release_addtime() {
  clear_has_addtime();
  if (addtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addtime_;
    addtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TrojanPacket

// required int32 id = 2;
inline bool TrojanPacket::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrojanPacket::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrojanPacket::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrojanPacket::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TrojanPacket::id() const {
  return id_;
}
inline void TrojanPacket::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SpyClient

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< SpyClient::PhoneType>() {
  return SpyClient::PhoneType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoMessage_2eproto__INCLUDED
